.
├── README.md
├── codes.txt
├── env.d.ts
├── eslint.config.ts
├── index.html
├── package-lock.json
├── package.json
├── public
│   ├── logo_tapit.svg
│   └── tapit.svg
├── src
│   ├── App.vue
│   ├── assets
│   │   ├── base.css
│   │   ├── logo.svg
│   │   ├── logo_tapit.png
│   │   ├── logo_tapit.svg
│   │   ├── main.css
│   │   ├── tapit.png
│   │   └── tapit.svg
│   ├── components
│   │   ├── dashboard
│   │   │   ├── DashboardChatComponent.vue
│   │   │   ├── DashboardComponent.vue
│   │   │   └── DashboardSettingComponent.vue
│   │   ├── icons
│   │   │   ├── IconCommunity.vue
│   │   │   ├── IconDocumentation.vue
│   │   │   ├── IconEcosystem.vue
│   │   │   ├── IconSupport.vue
│   │   │   └── IconTooling.vue
│   │   └── login
│   │       ├── LoginComponent.vue
│   │       ├── LoginFindComponent.vue
│   │       └── Register.vue
│   ├── main.ts
│   ├── pages
│   │   ├── DashboardPage.vue
│   │   └── LoginPage.vue
│   ├── router
│   │   └── index.ts
│   └── stores
│       └── counter.ts
├── tsconfig.app.json
├── tsconfig.json
├── tsconfig.node.json
└── vite.config.ts

10 directories, 37 files


==== FILE CONTENTS START ====


<script setup lang="ts">
import { RouterView } from 'vue-router'
</script>

<template>
  <RouterView />
</template>

<style scoped>
/* 필요하다면 글로벌 스타일 여기에 추가 */
</style>
/* color palette from <https://github.com/vuejs/theme> */
:root {
  --vt-c-white: #ffffff;
  --vt-c-white-soft: #f8f8f8;
  --vt-c-white-mute: #f2f2f2;

  --vt-c-black: #181818;
  --vt-c-black-soft: #222222;
  --vt-c-black-mute: #282828;

  --vt-c-indigo: #2c3e50;

  --vt-c-divider-light-1: rgba(60, 60, 60, 0.29);
  --vt-c-divider-light-2: rgba(60, 60, 60, 0.12);
  --vt-c-divider-dark-1: rgba(84, 84, 84, 0.65);
  --vt-c-divider-dark-2: rgba(84, 84, 84, 0.48);

  --vt-c-text-light-1: var(--vt-c-indigo);
  --vt-c-text-light-2: rgba(60, 60, 60, 0.66);
  --vt-c-text-dark-1: var(--vt-c-white);
  --vt-c-text-dark-2: rgba(235, 235, 235, 0.64);
}

/* semantic color variables for this project */
:root {
  --color-background: var(--vt-c-white);
  --color-background-soft: var(--vt-c-white-soft);
  --color-background-mute: var(--vt-c-white-mute);

  --color-border: var(--vt-c-divider-light-2);
  --color-border-hover: var(--vt-c-divider-light-1);

  --color-heading: var(--vt-c-text-light-1);
  --color-text: var(--vt-c-text-light-1);

  --section-gap: 160px;
}

@media (prefers-color-scheme: dark) {
  :root {
    --color-background: var(--vt-c-black);
    --color-background-soft: var(--vt-c-black-soft);
    --color-background-mute: var(--vt-c-black-mute);

    --color-border: var(--vt-c-divider-dark-2);
    --color-border-hover: var(--vt-c-divider-dark-1);

    --color-heading: var(--vt-c-text-dark-1);
    --color-text: var(--vt-c-text-dark-2);
  }
}

*,
*::before,
*::after {
  box-sizing: border-box;
  margin: 0;
  font-weight: normal;
}

body {
  min-height: 100vh;
  color: var(--color-text);
  background: var(--color-background);
  transition:
    color 0.5s,
    background-color 0.5s;
  line-height: 1.6;
  font-family:
    Inter,
    -apple-system,
    BlinkMacSystemFont,
    'Segoe UI',
    Roboto,
    Oxygen,
    Ubuntu,
    Cantarell,
    'Fira Sans',
    'Droid Sans',
    'Helvetica Neue',
    sans-serif;
  font-size: 15px;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
/*@import './base.css'; */
@import 'tailwindcss';
import { ref, computed } from 'vue'
import { defineStore } from 'pinia'

export const useCounterStore = defineStore('counter', () => {
  const count = ref(0)
  const doubleCount = computed(() => count.value * 2)
  function increment() {
    count.value++
  }

  return { count, doubleCount, increment }
})
<template>
  <main id="content" role="main" class="w-full max-w-md mx-auto p-1 rounded-xl shadow-2xl">
    <div class="mt-7 bg-white">
      <div class="p-4 sm:p-7">
        <div class="text-center">
          <h1 class="block text-2xl font-bold text-gray-800">비밀번호를 잊으셨나요?</h1>
          <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
            비밀번호를 아시나요?
            <RouterLink
              to="/login"
              class="text-blue-600 decoration-2 hover:underline font-medium"
              href="#"
            >
              Login here
            </RouterLink>
          </p>
        </div>

        <div class="mt-5">
          <form>
            <div class="grid gap-y-4">
              <div>
                <label for="email" class="block text-sm font-bold ml-1 mb-2">Email</label>
                <div class="relative">
                  <input
                    type="email"
                    id="email"
                    name="email"
                    class="py-3 px-4 block w-full border-2 border-gray-200 rounded-md text-sm focus:border-blue-500 focus:ring-blue-500 shadow-sm dark:text-white"
                    required
                    aria-describedby="email-error"
                  />
                </div>
                <p class="hidden text-xs text-red-600 mt-2" id="email-error">
                  Please include a valid email address so we can get back to you
                </p>
              </div>
              <button
                type="submit"
                class="py-3 px-4 inline-flex justify-center items-center gap-2 rounded-md border border-transparent font-semibold bg-slate-700 text-white hover:bg-slate-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition-all text-sm dark:focus:ring-offset-gray-800"
              >
                비민번호 초기화
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <p
      class="mt-3 flex justify-center items-center text-center divide-x divide-gray-300 dark:divide-gray-700"
    >
      <!--
      <a
        class="pl-3 inline-flex items-center gap-x-2 text-sm text-gray-600 decoration-2 hover:underline hover:text-blue-600 dark:text-gray-500 dark:hover:text-gray-200"
        href="#"
      >
        Contact us!
      </a>
      -->
    </p>
  </main>
</template>
<template>
  <form @submit.prevent="$emit('submit')" class="bg-white rounded-xl shadow-xl p-6 space-y-6">
    <div>
      <label for="email" class="block mb-2 text-slate-700 font-medium">Email</label>
      <input
        id="email"
        v-model="email"
        type="email"
        required
        class="w-full px-4 py-3 text-slate-800 border-b-2 border-slate-600 outline-none focus:border-slate-700 transition duration-150"
      />
    </div>
    <div>
      <label for="password" class="block mb-2 text-slate-700 font-medium">Password</label>
      <input
        id="password"
        v-model="password"
        type="password"
        required
        class="w-full px-4 py-3 text-slate-800 border-b-2 border-slate-600 outline-none focus:border-slate-700 transition duration-150"
      />
    </div>
    <div>
      <button
        type="submit"
        class="w-full py-3 px-4 inline-flex justify-center items-center text-white font-semibold bg-slate-600 hover:bg-slate-700 rounded-md shadow-sm transition-colors"
      >
        로그인
      </button>
    </div>
    <footer class="flex justify-between text-sm text-slate-600">
      <RouterLink :to="{ name: 'login-find' }" class="hover:text-slate-700 underline">
        비밀번호를 잊으셧나요?
      </RouterLink>
      <RouterLink to="/signup" class="hover:text-slate-700 underline"> 계정 생성 </RouterLink>
    </footer>
  </form>
</template>

<script setup lang="ts">
import { defineEmits, ref } from 'vue'
import { RouterLink } from 'vue-router'

defineEmits<{
  (e: 'submit'): void
}>()

const email = ref('')
const password = ref('')
</script>

<style scoped></style>
<template>
  <div class="p-6 bg-white shadow rounded-lg relative">
    <!-- 필터, 정렬 & 추가 버튼 (Grid 레이아웃) -->
    <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
      <!-- 1열: 정렬 및 검색 기준 + 추가 -->
      <div class="flex flex-col">
        <div class="flex items-center gap-2">
          <label class="font-medium text-gray-700">정렬 및 검색 기준</label>
          <select
            v-model="selectedSortField"
            class="block w-40 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
          >
            <option value="name">가맹점</option>
            <option value="id">아이디</option>
            <option value="phone">전화번호</option>
            <option value="manager">관리인</option>
          </select>
        </div>
        <button
          @click="promptAdd"
          class="self-start mt-2 px-4 py-2 bg-green-600 text-white font-medium rounded-md hover:bg-green-700"
        >
          추가
        </button>
      </div>

      <!-- 2~3열: 검색창 + 검색 버튼 + 정렬 토글 -->
      <div class="flex items-center gap-2 md:col-span-2 justify-end">
        <input
          v-model="searchKeyword"
          type="text"
          placeholder="검색어 입력"
          class="block w-48 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
        />
        <button
          @click="applyFilter"
          class="px-4 py-2 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700"
        >
          검색
        </button>
        <button
          @click="toggleSortOrder"
          class="px-4 py-2 bg-gray-100 text-gray-700 font-medium rounded-md hover:bg-gray-200"
        >
          <span v-if="sortOrder === 'asc'">▲ 오름차순</span>
          <span v-else>▼ 내림차순</span>
        </button>
      </div>
    </div>

    <!-- 데이터 테이블 -->
    <div class="overflow-x-auto">
      <table class="min-w-full divide-y divide-gray-200">
        <thead class="bg-gray-50">
          <tr>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">No</th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">
              가맹점
            </th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">
              아이디
            </th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">
              전화번호
            </th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">사장</th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">
              관리인
            </th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">상태</th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">관리</th>
            <th class="px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase">비고</th>
          </tr>
        </thead>
        <tbody class="bg-white divide-y divide-gray-200">
          <tr v-for="(store, idx) in sortedAndFiltered" :key="store.id" class="hover:bg-gray-50">
            <td class="px-6 py-4 text-sm text-gray-900 text-center">{{ idx + 1 }}</td>
            <td class="px-6 py-4 text-sm text-gray-900">{{ store.name }}</td>
            <td class="px-6 py-4 text-sm text-gray-900">{{ store.id }}</td>
            <td class="px-6 py-4 text-sm text-gray-900">{{ store.phone }}</td>
            <td class="px-6 py-4 text-sm text-gray-900">{{ store.owner }}</td>
            <td class="px-6 py-4 text-sm text-gray-900">{{ store.manager }}</td>
            <td class="px-6 py-4 text-center">
              <span
                v-if="store.status === 'Active'"
                class="px-2 inline-flex text-xs font-semibold rounded-full bg-green-100 text-green-800"
                >Active</span
              >
              <span
                v-else-if="store.status === 'Deactive'"
                class="px-2 inline-flex text-xs font-semibold rounded-full bg-red-100 text-red-800"
                >Deactive</span
              >
              <span
                v-else
                class="px-2 inline-flex text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800"
                >Pending</span
              >
            </td>
            <td class="px-6 py-4 text-center space-x-2">
              <button
                @click="promptEdit(store)"
                class="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-500"
              >
                Edit
              </button>
              <button
                @click="promptDelete(store)"
                class="px-3 py-1 bg-red-600 text-white rounded-md hover:bg-red-500"
              >
                Delete
              </button>
            </td>
            <td class="px-6 py-4 text-sm text-gray-900">{{ store.memo }}</td>
          </tr>
        </tbody>
      </table>
    </div>

    <!-- Delete Confirmation Dialog -->
    <div
      v-if="storeToDelete"
      class="fixed inset-0 flex items-center justify-center z-50 backdrop-blur"
    >
      <div class="absolute inset-0 bg-black opacity-25"></div>
      <div class="bg-white rounded-lg max-w-md mx-4 p-6 shadow-lg z-10">
        <div class="flex items-center space-x-4 mb-4">
          <div
            class="w-12 h-12 flex items-center justify-center rounded-full border border-gray-300"
          >
            ⚠️
          </div>
          <div>
            <h3 class="text-lg font-bold">삭제 확인</h3>
            <p class="mt-1 text-gray-700">
              "{{ storeToDelete.name }}"을(를) 정말 삭제하시겠습니까?
            </p>
          </div>
        </div>
        <div class="flex justify-end space-x-2">
          <button
            @click="cancelDelete"
            class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-500"
          >
            취소
          </button>
          <button
            @click="confirmDelete"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500"
          >
            삭제
          </button>
        </div>
      </div>
    </div>

    <!-- Edit Dialog -->
    <div
      v-if="editStoreData"
      class="fixed inset-0 flex items-center justify-center z-50 backdrop-blur"
    >
      <div class="absolute inset-0 bg-black opacity-25"></div>
      <div class="bg-white rounded-lg max-w-lg w-full mx-4 p-6 shadow-lg z-10">
        <h3 class="text-xl font-bold mb-4">가맹점 정보 수정</h3>
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-semibold text-gray-800">가맹점</label>
            <input
              v-model="editStoreData.name"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-semibold text-gray-800">아이디</label>
            <input
              v-model="editStoreData.id"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-semibold text-gray-800">전화번호</label>
            <input
              v-model="editStoreData.phone"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-semibold text-gray-800">사장</label>
            <input
              v-model="editStoreData.owner"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-semibold text-gray-800">관리인</label>
            <input
              v-model="editStoreData.manager"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-semibold text-gray-800">비고</label>
            <input
              v-model="editStoreData.memo"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>
        <div class="mt-6 flex justify-end space-x-2">
          <button
            @click="cancelEdit"
            class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-500"
          >
            취소
          </button>
          <button
            @click="confirmEdit"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500"
          >
            수정
          </button>
        </div>
      </div>
    </div>

    <!-- Add Dialog -->
    <div
      v-if="addStoreData"
      class="fixed inset-0 flex items-center justify-center z-50 backdrop-blur"
    >
      <div class="absolute inset-0 bg-black opacity-25"></div>
      <div class="bg-white rounded-lg max-w-lg w-full mx-4 p-6 shadow-lg z-10">
        <h3 class="text-xl font-bold mb-4">가맹점 추가</h3>
        <div class="space-y-4">
          <div>
            <label class="block text-sm font-semibold text-gray-800">가맹점</label>
            <input
              v-model="addStoreData.name"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-semibold text-gray-800">아이디</label>
            <input
              v-model="addStoreData.id"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-semibold text-gray-800">전화번호</label>
            <input
              v-model="addStoreData.phone"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-semibold text-gray-800">사장</label>
            <input
              v-model="addStoreData.owner"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-semibold text-gray-800">관리인</label>
            <input
              v-model="addStoreData.manager"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label class="block text-sm font-semibold text-gray-800">비고</label>
            <input
              v-model="addStoreData.memo"
              class="mt-1 w-full px-3 py-3 border-gray-300 rounded-md shadow-sm focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>
        <div class="mt-6 flex justify-end space-x-2">
          <button
            @click="cancelAdd"
            class="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-500"
          >
            취소
          </button>
          <button
            @click="confirmAdd"
            class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-500"
          >
            추가
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, computed } from 'vue'

interface Store {
  id: string
  name: string
  phone: string
  owner: string
  manager: string
  memo: string
  status: 'Active' | 'Deactive' | 'Pending'
}

// 초기 데이터
const rawStores: Omit<Store, 'status'>[] = [
  {
    id: 'qowognssla1',
    name: '구로_1',
    phone: '010-5020-7777',
    owner: '김덕순',
    manager: '배재훈',
    memo: '',
  },
  {
    id: 'qowognssla2',
    name: '광명_2',
    phone: '010-5020-7777',
    owner: '조용필',
    manager: '배재훈',
    memo: '',
  },
  {
    id: 'qowognssla3',
    name: '용인_3',
    phone: '010-5020-7777',
    owner: '곽지쭈',
    manager: '정민호',
    memo: '',
  },
  {
    id: 'qowognssla4',
    name: '서울_4',
    phone: '010-5020-7777',
    owner: '사쿠라',
    manager: '정민호',
    memo: '',
  },
  {
    id: 'qowognssla5',
    name: '부산_2',
    phone: '010-5020-7777',
    owner: '밍밍키',
    manager: '김아무개',
    memo: '',
  },
]
const statuses = ['Active', 'Deactive', 'Pending'] as const

const stores = ref<Store[]>(
  rawStores.map((s) => ({ ...s, status: statuses[Math.floor(Math.random() * statuses.length)] })),
)
const storeToDelete = ref<Store | null>(null)
const editStoreData = ref<Store | null>(null)
const addStoreData = ref<Store | null>(null)

// 정렬용
const selectedSortField = ref<keyof Store>('name')
const sortOrder = ref<'asc' | 'desc'>('asc')

// 검색용
const searchKeyword = ref('')
const appliedSearchField = ref<keyof Store>('name')
const appliedSearchTerm = ref('')

// 검색 적용
function applyFilter() {
  appliedSearchField.value = selectedSortField.value
  appliedSearchTerm.value = searchKeyword.value.trim()
}

// 정렬 토글
function toggleSortOrder() {
  sortOrder.value = sortOrder.value === 'asc' ? 'desc' : 'asc'
}

// Delete
function promptDelete(store: Store) {
  storeToDelete.value = store
}
function confirmDelete() {
  if (!storeToDelete.value) return
  stores.value = stores.value.filter((s) => s.id !== storeToDelete.value!.id)
  storeToDelete.value = null
}
function cancelDelete() {
  storeToDelete.value = null
}

// Edit
function promptEdit(store: Store) {
  editStoreData.value = { ...store }
}
function confirmEdit() {
  if (!editStoreData.value) return
  const idx = stores.value.findIndex((s) => s.id === editStoreData.value!.id)
  if (idx !== -1) stores.value[idx] = { ...editStoreData.value! }
  editStoreData.value = null
}
function cancelEdit() {
  editStoreData.value = null
}

// Add
function promptAdd() {
  addStoreData.value = {
    id: '',
    name: '',
    phone: '',
    owner: '',
    manager: '',
    memo: '',
    status: 'Active',
  }
}
function confirmAdd() {
  if (!addStoreData.value) return
  stores.value.push({ ...addStoreData.value! })
  addStoreData.value = null
}
function cancelAdd() {
  addStoreData.value = null
}

// computed: 검색 후 정렬
const sortedAndFiltered = computed(() => {
  let arr = [...stores.value]
  if (appliedSearchTerm.value) {
    const term = appliedSearchTerm.value.toLowerCase()
    arr = arr.filter((x) => String(x[appliedSearchField.value]).toLowerCase().includes(term))
  }
  arr.sort((a, b) => {
    const aV = String(a[selectedSortField.value]).toLowerCase()
    const bV = String(b[selectedSortField.value]).toLowerCase()
    if (aV < bV) return sortOrder.value === 'asc' ? -1 : 1
    if (aV > bV) return sortOrder.value === 'asc' ? 1 : -1
    return 0
  })
  return arr
})
</script>

<style scoped>
/* 필요 시 추가 커스터마이징이 있으면 여기에 작성하세요 */
</style>
<template><h1>Chat</h1></template>
<template><h1>setting</h1></template>
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor">
    <path
      d="M10 3.22l-.61-.6a5.5 5.5 0 0 0-7.666.105 5.5 5.5 0 0 0-.114 7.665L10 18.78l8.39-8.4a5.5 5.5 0 0 0-.114-7.665 5.5 5.5 0 0 0-7.666-.105l-.61.61z"
    />
  </svg>
</template>
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor">
    <path
      d="M15 4a1 1 0 1 0 0 2V4zm0 11v-1a1 1 0 0 0-1 1h1zm0 4l-.707.707A1 1 0 0 0 16 19h-1zm-4-4l.707-.707A1 1 0 0 0 11 14v1zm-4.707-1.293a1 1 0 0 0-1.414 1.414l1.414-1.414zm-.707.707l-.707-.707.707.707zM9 11v-1a1 1 0 0 0-.707.293L9 11zm-4 0h1a1 1 0 0 0-1-1v1zm0 4H4a1 1 0 0 0 1.707.707L5 15zm10-9h2V4h-2v2zm2 0a1 1 0 0 1 1 1h2a3 3 0 0 0-3-3v2zm1 1v6h2V7h-2zm0 6a1 1 0 0 1-1 1v2a3 3 0 0 0 3-3h-2zm-1 1h-2v2h2v-2zm-3 1v4h2v-4h-2zm1.707 3.293l-4-4-1.414 1.414 4 4 1.414-1.414zM11 14H7v2h4v-2zm-4 0c-.276 0-.525-.111-.707-.293l-1.414 1.414C5.42 15.663 6.172 16 7 16v-2zm-.707 1.121l3.414-3.414-1.414-1.414-3.414 3.414 1.414 1.414zM9 12h4v-2H9v2zm4 0a3 3 0 0 0 3-3h-2a1 1 0 0 1-1 1v2zm3-3V3h-2v6h2zm0-6a3 3 0 0 0-3-3v2a1 1 0 0 1 1 1h2zm-3-3H3v2h10V0zM3 0a3 3 0 0 0-3 3h2a1 1 0 0 1 1-1V0zM0 3v6h2V3H0zm0 6a3 3 0 0 0 3 3v-2a1 1 0 0 1-1-1H0zm3 3h2v-2H3v2zm1-1v4h2v-4H4zm1.707 4.707l.586-.586-1.414-1.414-.586.586 1.414 1.414z"
    />
  </svg>
</template>
<!-- This icon is from <https://github.com/Templarian/MaterialDesign>, distributed under Apache 2.0 (https://www.apache.org/licenses/LICENSE-2.0) license-->
<template>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    aria-hidden="true"
    role="img"
    class="iconify iconify--mdi"
    width="24"
    height="24"
    preserveAspectRatio="xMidYMid meet"
    viewBox="0 0 24 24"
  >
    <path
      d="M20 18v-4h-3v1h-2v-1H9v1H7v-1H4v4h16M6.33 8l-1.74 4H7v-1h2v1h6v-1h2v1h2.41l-1.74-4H6.33M9 5v1h6V5H9m12.84 7.61c.1.22.16.48.16.8V18c0 .53-.21 1-.6 1.41c-.4.4-.85.59-1.4.59H4c-.55 0-1-.19-1.4-.59C2.21 19 2 18.53 2 18v-4.59c0-.32.06-.58.16-.8L4.5 7.22C4.84 6.41 5.45 6 6.33 6H7V5c0-.55.18-1 .57-1.41C7.96 3.2 8.44 3 9 3h6c.56 0 1.04.2 1.43.59c.39.41.57.86.57 1.41v1h.67c.88 0 1.49.41 1.83 1.22l2.34 5.39z"
      fill="currentColor"
    ></path>
  </svg>
</template>
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="20" height="17" fill="currentColor">
    <path
      d="M11 2.253a1 1 0 1 0-2 0h2zm-2 13a1 1 0 1 0 2 0H9zm.447-12.167a1 1 0 1 0 1.107-1.666L9.447 3.086zM1 2.253L.447 1.42A1 1 0 0 0 0 2.253h1zm0 13H0a1 1 0 0 0 1.553.833L1 15.253zm8.447.833a1 1 0 1 0 1.107-1.666l-1.107 1.666zm0-14.666a1 1 0 1 0 1.107 1.666L9.447 1.42zM19 2.253h1a1 1 0 0 0-.447-.833L19 2.253zm0 13l-.553.833A1 1 0 0 0 20 15.253h-1zm-9.553-.833a1 1 0 1 0 1.107 1.666L9.447 14.42zM9 2.253v13h2v-13H9zm1.553-.833C9.203.523 7.42 0 5.5 0v2c1.572 0 2.961.431 3.947 1.086l1.107-1.666zM5.5 0C3.58 0 1.797.523.447 1.42l1.107 1.666C2.539 2.431 3.928 2 5.5 2V0zM0 2.253v13h2v-13H0zm1.553 13.833C2.539 15.431 3.928 15 5.5 15v-2c-1.92 0-3.703.523-5.053 1.42l1.107 1.666zM5.5 15c1.572 0 2.961.431 3.947 1.086l1.107-1.666C9.203 13.523 7.42 13 5.5 13v2zm5.053-11.914C11.539 2.431 12.928 2 14.5 2V0c-1.92 0-3.703.523-5.053 1.42l1.107 1.666zM14.5 2c1.573 0 2.961.431 3.947 1.086l1.107-1.666C18.203.523 16.421 0 14.5 0v2zm3.5.253v13h2v-13h-2zm1.553 12.167C18.203 13.523 16.421 13 14.5 13v2c1.573 0 2.961.431 3.947 1.086l1.107-1.666zM14.5 13c-1.92 0-3.703.523-5.053 1.42l1.107 1.666C11.539 15.431 12.928 15 14.5 15v-2z"
    />
  </svg>
</template>
<template>
  <svg xmlns="http://www.w3.org/2000/svg" width="18" height="20" fill="currentColor">
    <path
      d="M11.447 8.894a1 1 0 1 0-.894-1.789l.894 1.789zm-2.894-.789a1 1 0 1 0 .894 1.789l-.894-1.789zm0 1.789a1 1 0 1 0 .894-1.789l-.894 1.789zM7.447 7.106a1 1 0 1 0-.894 1.789l.894-1.789zM10 9a1 1 0 1 0-2 0h2zm-2 2.5a1 1 0 1 0 2 0H8zm9.447-5.606a1 1 0 1 0-.894-1.789l.894 1.789zm-2.894-.789a1 1 0 1 0 .894 1.789l-.894-1.789zm2 .789a1 1 0 1 0 .894-1.789l-.894 1.789zm-1.106-2.789a1 1 0 1 0-.894 1.789l.894-1.789zM18 5a1 1 0 1 0-2 0h2zm-2 2.5a1 1 0 1 0 2 0h-2zm-5.447-4.606a1 1 0 1 0 .894-1.789l-.894 1.789zM9 1l.447-.894a1 1 0 0 0-.894 0L9 1zm-2.447.106a1 1 0 1 0 .894 1.789l-.894-1.789zm-6 3a1 1 0 1 0 .894 1.789L.553 4.106zm2.894.789a1 1 0 1 0-.894-1.789l.894 1.789zm-2-.789a1 1 0 1 0-.894 1.789l.894-1.789zm1.106 2.789a1 1 0 1 0 .894-1.789l-.894 1.789zM2 5a1 1 0 1 0-2 0h2zM0 7.5a1 1 0 1 0 2 0H0zm8.553 12.394a1 1 0 1 0 .894-1.789l-.894 1.789zm-1.106-2.789a1 1 0 1 0-.894 1.789l.894-1.789zm1.106 1a1 1 0 1 0 .894 1.789l-.894-1.789zm2.894.789a1 1 0 1 0-.894-1.789l.894 1.789zM8 19a1 1 0 1 0 2 0H8zm2-2.5a1 1 0 1 0-2 0h2zm-7.447.394a1 1 0 1 0 .894-1.789l-.894 1.789zM1 15H0a1 1 0 0 0 .553.894L1 15zm1-2.5a1 1 0 1 0-2 0h2zm12.553 2.606a1 1 0 1 0 .894 1.789l-.894-1.789zM17 15l.447.894A1 1 0 0 0 18 15h-1zm1-2.5a1 1 0 1 0-2 0h2zm-7.447-5.394l-2 1 .894 1.789 2-1-.894-1.789zm-1.106 1l-2-1-.894 1.789 2 1 .894-1.789zM8 9v2.5h2V9H8zm8.553-4.894l-2 1 .894 1.789 2-1-.894-1.789zm.894 0l-2-1-.894 1.789 2 1 .894-1.789zM16 5v2.5h2V5h-2zm-4.553-3.894l-2-1-.894 1.789 2 1 .894-1.789zm-2.894-1l-2 1 .894 1.789 2-1L8.553.106zM1.447 5.894l2-1-.894-1.789-2 1 .894 1.789zm-.894 0l2 1 .894-1.789-2-1-.894 1.789zM0 5v2.5h2V5H0zm9.447 13.106l-2-1-.894 1.789 2 1 .894-1.789zm0 1.789l2-1-.894-1.789-2 1 .894 1.789zM10 19v-2.5H8V19h2zm-6.553-3.894l-2-1-.894 1.789 2 1 .894-1.789zM2 15v-2.5H0V15h2zm13.447 1.894l2-1-.894-1.789-2 1 .894 1.789zM18 15v-2.5h-2V15h2z"
    />
  </svg>
</template>
<template>
  <div class="flex h-screen bg-slate-800">
    <div class="w-full max-w-md m-auto bg-white rounded-xl p-6 shadow-lg">
      <header class="text-center mb-2">
        <img class="mx-auto w-40 max-w-[50%] md:w-40" src="@/assets/tapit.svg" alt="logo" />
      </header>

      <div class="flex-grow">
        <RouterView />
      </div>

      <!-- 푸터: 회사 연락처 -->
      <footer class="mt-4 text-center text-sm text-gray-600">
        이메일: <a href="mailto:info@company.com" class="underline">info@company.com</a> | 전화:
        <a href="tel:+82212345678" class="underline">02-1234-5678</a>
      </footer>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref } from 'vue'
import { useRouter, RouterView } from 'vue-router'
import axios from 'axios'

const router = useRouter()
const email = ref('')
const password = ref('')
const error = ref<string>('')

async function login() {
  error.value = ''
  try {
    const { data } = await axios.post('/api/login', {
      email: email.value,
      password: password.value,
    })
    localStorage.setItem('token', data.token)
    router.push('/dashboard')
  } catch (e: unknown) {
    if (axios.isAxiosError(e)) {
      error.value = e.response?.data?.message ?? '로그인에 실패했습니다.'
    } else {
      error.value = '알 수 없는 오류가 발생했습니다.'
    }
  }
}
</script>

<style scoped>
/* 필요 시 추가적인 스타일을 여기에 작성하세요 */
</style>
<template>
  <div class="bg-gray-100 font-sans min-h-screen">
    <div class="flex flex-col md:flex-row min-h-screen">
      <!-- Sidebar -->
      <aside
        class="bg-white shadow-lg fixed md:static inset-y-0 left-0 z-50 w-20 md:w-64 flex flex-col h-screen"
        :class="{ 'w-64': openSidebar, 'hidden md:block': !openSidebar }"
      >
        <!-- 상단: 로고 & 메뉴 -->
        <div class="flex-grow flex flex-col">
          <div class="p-4 flex items-center justify-between border-b">
            <h1
              class="text-xl font-bold text-slate-600 transition-opacity duration-300"
              :class="{
                'opacity-100': openSidebar || windowWidth >= 768,
                'opacity-0 hidden': !openSidebar && windowWidth < 768,
              }"
            >
              TapIt
            </h1>
            <button
              @click="openSidebar = !openSidebar"
              class="md:hidden p-2 rounded-full hover:bg-gray-200"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 6h16M4 12h16m-7 6h7"
                />
              </svg>
            </button>
          </div>

          <!-- 메뉴 -->
          <nav class="flex-1 overflow-y-auto">
            <ul class="py-4 space-y-2">
              <li v-for="section in sections" :key="section.id">
                <a
                  href="#"
                  @click.prevent="((activeSection = section.id), (openSidebar = false))"
                  class="flex items-center space-x-3 px-4 py-2 hover:bg-gray-100 rounded-lg transition-colors"
                  :class="{ 'bg-gray-100': activeSection === section.id }"
                >
                  <component :is="section.icon" class="h-5 w-5 text-gray-600" />
                  <span
                    class="text-gray-700 transition-opacity duration-300"
                    :class="{
                      'block opacity-100': openSidebar || windowWidth >= 768,
                      'hidden opacity-0': !openSidebar && windowWidth < 768,
                    }"
                  >
                    {{ section.label }}
                  </span>
                </a>
              </li>
            </ul>
          </nav>
        </div>

        <!-- 하단: Logout 버튼 -->
        <div class="p-4">
          <button
            @click="logout"
            class="w-full py-2 text-sm bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors flex items-center justify-center space-x-2"
          >
            <svg
              class="w-4 h-4"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
              viewBox="0 0 24 24"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M17 16l4-4m0 0l-4-4" />
              <path d="M7 12h14M3 12a9 9 0 1118 0 9 9 0 01-18 0z" />
            </svg>
            <span>Log Out</span>
          </button>
        </div>
      </aside>

      <!-- Main Content -->
      <main class="flex-1 p-4 md:p-6 overflow-y-auto">
        <!-- 모바일용 토글 바 -->
        <div class="md:hidden flex justify-between items-center mb-4">
          <h1 class="text-xl font-bold text-gray-800">TapIt</h1>
          <button @click="openSidebar = !openSidebar" class="p-2 rounded-full hover:bg-gray-200">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M4 6h16M4 12h16m-7 6h7"
              />
            </svg>
          </button>
        </div>

        <DashboardComponent v-if="activeSection === 'merchants'" />
        <DashboardChatComponent v-if="activeSection === 'chat'" />
        <DashboardSettingComponent v-if="activeSection === 'settings'" />
      </main>
    </div>
  </div>
</template>

<script setup lang="ts">
import { ref, onMounted, onBeforeUnmount } from 'vue'
import DashboardComponent from '@/components/dashboard/DashboardComponent.vue'
import DashboardChatComponent from '@/components/dashboard/DashboardChatComponent.vue'
import DashboardSettingComponent from '@/components/dashboard/DashboardSettingComponent.vue'
import {
  ChatBubbleOvalLeftEllipsisIcon,
  BuildingStorefrontIcon,
  Cog6ToothIcon,
} from '@heroicons/vue/24/outline'

const openSidebar = ref(false)
const activeSection = ref('merchants')
const windowWidth = ref(window.innerWidth)

const sections = [
  { id: 'merchants', label: 'Merchants', icon: BuildingStorefrontIcon },
  { id: 'chat', label: 'Conversations', icon: ChatBubbleOvalLeftEllipsisIcon },
  { id: 'settings', label: 'Settings', icon: Cog6ToothIcon },
]

const updateWindowWidth = () => {
  windowWidth.value = window.innerWidth
}

const logout = () => {
  localStorage.removeItem('token')
  location.href = '/login'
}

onMounted(() => {
  window.addEventListener('resize', updateWindowWidth)
})

onBeforeUnmount(() => {
  window.removeEventListener('resize', updateWindowWidth)
})
</script>

<style scoped></style>
import { createRouter, createWebHistory } from 'vue-router'
import type { RouteRecordRaw } from 'vue-router'
import LoginPage from '@/pages/LoginPage.vue'
import DashboardPage from '../pages/DashboardPage.vue'

import LoginComponent from '@/components/login/LoginComponent.vue'
import FindComponent from '@/components/login/LoginFindComponent.vue'

const routes: RouteRecordRaw[] = [
  { path: '/', redirect: '/login' },
  {
    path: '/login',
    component: LoginPage,
    children: [
      { path: '', component: LoginComponent },
      { path: 'find', name: 'login-find', component: FindComponent },
    ],
  },
  { path: '/dashboard', component: DashboardPage },
]

export default createRouter({
  history: createWebHistory(),
  routes,
})
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'
import './assets/main.css' // Tailwind 등

const app = createApp(App)
app.use(router)
app.mount('#app')
<!doctype html>
<html lang="">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="logo_tapit.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Start your inquiries with TapIt!</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.ts"></script>
  </body>
</html>
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'
import vueDevTools from 'vite-plugin-vue-devtools'
import tailwindcss from '@tailwindcss/vite'

// https://vite.dev/config/
export default defineConfig({
  plugins: [vue(), vueDevTools(), tailwindcss()],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url)),
    },
  },
})
{
  "name": "tapit-frontend",
  "version": "0.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "run-p type-check \"build-only {@}\" --",
    "preview": "vite preview",
    "build-only": "vite build",
    "type-check": "vue-tsc --build",
    "lint": "eslint . --fix",
    "format": "prettier --write src/"
  },
  "dependencies": {
    "@tailwindcss/cli": "^4.1.5",
    "axios": "^1.9.0",
    "pinia": "^3.0.1",
    "vue": "^3.5.13",
    "vue-router": "^4.5.0"
  },
  "devDependencies": {
    "@tailwindcss/vite": "^4.1.5",
    "@tsconfig/node22": "^22.0.1",
    "@types/axios": "^0.9.36",
    "@types/node": "^22.14.0",
    "@vitejs/plugin-vue": "^5.2.3",
    "@vue/eslint-config-prettier": "^10.2.0",
    "@vue/eslint-config-typescript": "^14.5.0",
    "@vue/tsconfig": "^0.7.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.22.0",
    "eslint-plugin-vue": "~10.0.0",
    "jiti": "^2.4.2",
    "npm-run-all2": "^7.0.2",
    "postcss": "^8.5.3",
    "prettier": "3.5.3",
    "tailwindcss": "^4.1.5",
    "typescript": "~5.8.0",
    "vite": "^6.2.4",
    "vite-plugin-vue-devtools": "^7.7.2",
    "vue-tsc": "^2.2.8"
  }
}
